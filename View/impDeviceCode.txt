//Device Code

// Assign hardware.pin9 to a global variable, therm
therm <- hardware.pin9;

// Configure pin5/therm for analog input
therm.configure(ANALOG_IN);
 
// These constants are particular to the thermistor we're using.
// Check your datasheet for what values you should be using
const B_THERM = 3977.0;
const T0_THERM = 298.15;
 
// The resistor in the circuit (10KÎ©)
const R2 = 10000.0;
 
function getTemp() {
    local vin = hardware.voltage();
    local vout = vin * therm.read() / 65535.0;
    local rTherm = (R2 * vin / vout) - R2;
    local lnTherm = math.log(10000.0 / rTherm);
    local tempK = (T0_THERM * B_THERM) / (B_THERM - T0_THERM * lnTherm);
  
    local tempC = tempK - 273.15;
    local tempF = tempC * 9.0 / 5.0 + 32.0;
    
    local temp = {};
    temp.celsius <- tempC;
    temp.fahrenheit <- tempF;
    return temp;
}

function getVoltage() {
    local vin = hardware.voltage();
    local vout = vin * therm.read() / 65535.0;

    local volt = {};
    volt.age <- vout;

    return volt;
}

function getLightLevel() {
    local level = hardware.lightlevel();

    local light = {};
    light.level <- level;

    return light;
}
 
function poll() {
    // Get and log the temperature in both scales
    local temp = getTemp();
    local volt = getVoltage();
    local light = getLightLevel();

    local readings = {};
    readings.temp <- temp;
    readings.volt <- volt;
    readings.light <- light;
    agent.send ( "eiData", readings ) ;
	
    // Wake in 5 seconds and read the value again:
    imp.wakeup(5, poll);
}

// Call the function to make an inital poll
poll();